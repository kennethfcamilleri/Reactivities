{"version":3,"sources":["app/models/pagination.ts","app/models/activity.ts","api/agent.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","Activity","init","Object","assign","ActivityFormValues","activity","id","undefined","title","category","description","date","city","venue","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","create","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","categoryOptions","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","ActivityDetailedSideBar","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","exact","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.26f6ac10.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import { isConstructorDeclaration } from \"typescript\";\nimport { Profile } from \"./profile\";\n\ninterface Props {\n  attendees: Profile[];\n}\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n  }\n\n  export class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n      Object.assign(this, init);\n    }\n  }\n  \n  export class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n      if (activity) {\n        this.id = activity.id;\n        this.title = activity.title;\n        this.category = activity.category;\n        this.description = activity.description;\n        this.date = activity.date;\n        this.venue = activity.venue;\n        this.city = activity.city;\n      }\n    }\n  }\n\n","import { PaginatedResult } from './../app/models/pagination';\nimport { User, UserFormValues } from './../app/models/user';\nimport { store } from './../app/stores/store';\nimport { Activity, ActivityFormValues } from './../app/models/activity';\nimport axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '..';\nimport { Photo, Profile, UserActivity } from '../app/models/profile';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n\n    const pagination = response.headers['pagination'];\n    \n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n},(error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    switch(status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key]);\n                    }\n                }\n                throw modalStateErrors.flat();\n            } else {\n                toast.error(data);\n            }\n            break;\n        case 401:\n            toast.error('unauthorized');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody)\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\n        .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: String, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string,\n    displayName: string,\n    image?: string,\n    bio?: string,\n    followersCount: number,\n    followingCount: number,\n    following: boolean,\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { PaginatedResult, Pagination, PagingParams } from './../models/pagination';\nimport { Activity, ActivityFormValues } from './../models/activity';\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from '../../api/agent';\nimport format from 'date-fns/format';\nimport { store } from './store';\nimport { Profile } from '../models/profile';\nimport ActivityListItemAttendee from '../../features/activities/dashboard/ActivityListItemAttendee';\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                resetPredicate();\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    }\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString());\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy')\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }    \n\n    loadActivities = async () => {\n        this.setLoadingInitial(true);\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.setLoadingInitial(true);\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    } \n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n                \n                \n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error)\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n            this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}","import { UserActivity } from './../models/profile';\nimport { UserFormValues } from './../models/user';\nimport { makeAutoObservable, reaction, runInAction } from 'mobx';\nimport React from 'react';\nimport agent from '../../api/agent';\nimport { Photo, Profile } from '../models/profile';\nimport { store } from './store';\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                    this.profile = {...this.profile, ...profile as Profile};\n                    this.loading = false;\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                console.log(error);\n                this.loadingFollowings = false;\n            })\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities= true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loadingActivities = false;\n            })\n        }\n    }\n}","import { User, UserFormValues } from './../models/user';\nimport { makeAutoObservable, runInAction } from 'mobx';\nimport agent from './../../api/agent';\nimport { store } from './store';\nimport { history } from '../..';\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) {\n            this.user.image = image;\n        }\n    }\n\n    setDisplayName = (name: string) => {\n        if (this.user) {\n            this.user.displayName = name;\n        }\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { ServerError } from './../models/serverError';\nimport { makeAutoObservable, reaction } from 'mobx';\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from 'mobx';\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n} ","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar() {\n\n    const {userStore: {user, logout}} = useStore();\n    \n    return (\n        <Menu inverted fixed=\"top\">\n            <Container>\n                <Menu.Item as={NavLink} to='/' header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}} />\n                    Reactivities\n                </Menu.Item>\n\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\n\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='MyProfile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n\n    return (\n        <>\n            <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                \n                <Menu.Item\n                    content='All Activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n\n                <Menu.Item\n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n\n                <Menu.Item\n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar \n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport { SyntheticEvent } from \"react\";\nimport { Button, Reveal } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{width: '100%'}}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not Following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{width: '100%'}}>\n                <Button \n                    fluid \n                    basic\n                    color={profile.following ? 'red' : 'green'} \n                    content={profile.following ? 'Unfollow' : 'Follow'} \n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n    function truncate(str: string | undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0,37) + '...' : str;\n        }\n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png' } />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Image, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image \n                                size='mini' \n                                circular src={attendee.image || '/assets/user.png'}\n                                bordered\n                                style={attendee.following ? styles : null}\n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n            ))}\n\n        </List>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({activity}: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign:'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n\n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n    \n    return (\n        <Fragment>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities.map((activity) => (\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    ))}\n                </Fragment>\n            ))}\n        </Fragment>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\nexport default observer (function ActivityDashboard() {\n\n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadingNext(false));\n    }\n  \n    useEffect(() => {\n      if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n    \n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                    <InfiniteScroll \n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                    <ActivityList />\n                \n                    </InfiniteScroll>  \n                )}\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport { StringSchema } from 'yup';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    \n    return (\n        <Formik \n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                setErrors({error: 'Invalid Email or Password'}))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error' render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n            \n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    \n    return (\n        <Formik \n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required(),\n                password: Yup.string().required()\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign Up to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error' render={() => \n                        <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting } \n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n            \n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const {userStore, modalStore} = useStore();\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n                <Container text>\n                    <Header as='h1' inverted>\n                        <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\n                        Reactivities\n                    </Header>\n\n                    {userStore.isLoggedIn ? (\n                        <>\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\n\n                            <Button as={Link} to='/activities' size='huge' inverted>\n                                Go to Activities!\n                            </Button>\n                        </>\n                    ) : (\n                        \n                        <>\n\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Login!\n                        </Button>\n\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register!\n                        </Button>\n\n                        </>\n                    )}\n                    \n\n                </Container>\n        </Segment>\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport { StringSchema } from 'yup';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'}\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\nimport { StringSchema } from 'yup';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { Activity, ActivityFormValues } from \"../../../app/models/activity\";\nimport { useStore } from \"../../../app/stores/store\";\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from \"formik\";\nimport * as Yup from 'yup';\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\n\nexport default observer(function ActivityForm() {\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const {createActivity, updateActivity, loading, loadActivity, loadingInitial} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required()\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id) {\n            let newActivity = {\n                ...activity, \n                id: uuid()\n            }\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik \n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={activity} \n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <MyTextInput name='title' placeholder='Title' />\n                    <MyTextArea rows={3} placeholder='Description' name='description' />\n                    <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                    <MyDateInput \n                        placeholderText='Date' \n                        name='date' \n                        showTimeSelect \n                        timeCaption='time'\n                        dateFormat='MMMM d, yyyy h:mm aa'\n                    />\n                    <Header content='Location Details' sub color='teal' />\n                    <MyTextInput placeholder='City' name='city' />\n                    <MyTextInput placeholder='Venue' name='venue' />\n                    <Button \n                        disabled={isSubmitting || !dirty || !isValid}\n                        loading={isSubmitting} floated='right' \n                        positive type='submit' content='Submit' />\n                    <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                </Form>\n                )}\n            </Formik>\n        </Segment>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import { format } from 'date-fns/esm';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {activity.isCancelled &&\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n\n                    <>\n                        <Button \n                            color={activity.isCancelled ? 'green' : 'red' }\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity' }\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link} \n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`} \n                            color='orange' \n                            floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled} loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\n                )}  \n\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'person' : 'people' } going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                            <Label\n                                style={{ position: 'absolute' }}\n                                color='orange'\n                                ribbon='right'\n                            >\n                                Host\n                            </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSideBar from './ActivityDetailedSideBar';\n\nexport default observer(function ActivityDetails() {\n\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n      if (id) loadActivity(id);\n      return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n    \n    return (\n        <Grid>\n          <Grid.Column width={10}>\n            <ActivityDetailedHeader activity={activity} />\n            <ActivityDetailedInfo activity={activity} />\n            <ActivityDetailedChat activityId={activity.id} />\n          </Grid.Column>\n          <Grid.Column width={6}>\n            <ActivityDetailedSideBar activity={activity} />\n          </Grid.Column>\n        </Grid>\n    );\n})","import React from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport { useState } from 'react';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors && \n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not found this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import { Form, Formik, yupToFormErrors } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\nimport { Button } from \"semantic-ui-react\";\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\n    const {profileStore: {profile, updateProfile}} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n        {({isSubmitting, isValid, dirty}) => (\n            <Form className='ui form'>\n                <MyTextInput placeholder='Display Name' name='displayName' />\n                <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\n                <Button \n                    positive\n                    type='submit'\n                    loading={isSubmitting}\n                    content='Update Profile'\n                    floated='right'\n                    disabled={!isValid || !dirty}\n                />\n            </Form>\n        )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEditForm from './ProfileEditForm';\n\nexport default observer(function ProfileAbout() {\n    const {profileStore} = useStore();\n    const {isCurrentUser, profile} = profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n    return (\n        <Tab.Pane>\n           <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button \n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                        {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n                </Grid.Column>\n            </Grid> \n        </Tab.Pane>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport { SyntheticEvent, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Grid, Header, Tab, TabProps, Image } from \"semantic-ui-react\";\nimport { format } from 'date-fns';\nimport { UserActivity } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'future' } },\n    { menuItem: 'Past Events', pane: { key: 'past' } },\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\n];\n\nexport default observer(function ProfileActivities() {\n    const { profileStore } = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n               <Grid.Column width={16}>\n                   <Header floated='left' icon='calendar' content={'Activities'} />\n               </Grid.Column>\n               <Grid.Column width={16}>\n                    <Tab \n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card \n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image \n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n               </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header \n                        floated='left' \n                        icon='user' \n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Button, Grid, Header, Image } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropZone';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    \n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n\n            <Grid.Column width={1} />\n\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize Image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n\n            <Grid.Column width={1} />\n            \n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                <>\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\n                <Button.Group widths={2}>\n                    <Button loading={loading} onClick={onCrop} positive icon='check' />\n                    <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n}","import { profile } from 'console';\nimport { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({profile}: Props) {\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto}} = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n             <Grid>\n                 <Grid.Column width={16}>\n                     <Header floated='left' icon='image' content='Photos' />\n                     {isCurrentUser && (\n                         <Button floated='right'basic\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                     )}\n                 </Grid.Column>\n\n                 <Grid.Column width={16}>\n                     {addPhotoMode ? (\n                         <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                     ) : (\n                        <Card.Group itemsPerRow={5}>\n                            {profile.photos?.map(photo => (\n                            <Card key={photo.id}>\n                                <Image src={photo.url} />\n                                {isCurrentUser && (\n                                    <Button.Group fluid widths={2}>\n                                        <Button \n                                            basic\n                                            color='green'\n                                            content='Main'\n                                            name={'main' + photo.id}\n                                            disabled={photo.isMain}\n                                            loading={target === 'main' + photo.id && loading}\n                                            onClick={e => handleSetMainPhoto(photo, e)}\n                                        />\n                                        <Button \n                                            basic \n                                            color='red' \n                                            icon='trash'\n                                            loading={target === photo.id && loading}\n                                            onClick={e => handleDeletePhoto(photo, e)}\n                                            disabled={photo.isMain}\n                                            name={photo.id}\n                                        />\n                                    </Button.Group>\n                                )}\n                            </Card> \n                            ))}\n                        </Card.Group>\n                     ) }\n                 </Grid.Column>\n             </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n\n    const {profileStore} = useStore();\n    \n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\n    ];\n\n    return (\n        <Tab\n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Divider, Grid, Header, Item, Reveal, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\nexport default observer(function ProfileHeader({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n               <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column> \n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n    \n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                <>\n                    <ProfileHeader profile={profile} />\n                    <ProfileContent profile={profile} />\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React, { Fragment, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n    const location = useLocation();\n    const {commonStore, userStore} = useStore();\n    \n    useEffect(() => {\n      if (commonStore.token) {\n        userStore.getUser().finally(() => commonStore.setAppLoaded());\n      } else {\n        commonStore.setAppLoaded();\n      }\n    }, [commonStore, userStore])\n    \n    if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n    return (\n      <Fragment>\n        <ToastContainer position='bottom-right' hideProgressBar />\n        <ModalContainer />\n        <Route exact path='/' component={HomePage} />\n        <Route \n          path={'/(.+)'}\n          render={() => (\n            <Fragment>\n              <NavBar />\n              <Container style={{marginTop: '7em'}}>\n                <Switch>\n                  <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                  <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                  <PrivateRoute key={location.key} path={['/createActivity','/manage/:id']} component={ActivityForm} />\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                  <PrivateRoute path='/errors' component={TestErrors} />\n                  <Route path='/server-error' component={ServerError} />\n                  <Route component={NotFound} />\n                </Switch>\n              </Container>\n            </Fragment>\n          )}    \n        />\n      </Fragment>\n    );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <Router history={history}>\n            <ScrollToTop />\n            <App /> \n        </Router>\n    </StoreContext.Provider>, \n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}